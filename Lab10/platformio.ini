; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
platform = ststm32
board = nucleo_f411re
; HSE_VALUE is written in "stm32f4xx_hal_conf.h", but is overwritten by PlatformIO. Workaround: Build flag define takes precedence.
build_flags =
    -Wl,-u,_printf_float,-u,_scanf_float
    -DSTM32F4
    -DHSE_VALUE=8000000U
debug_build_flags = -O0 -g -ggdb
debug_init_break = tbreak setup
extra_scripts = extra_script.py
framework = stm32cube
lib_archive = no
lib_deps = ./../Common
monitor_speed = 115200

; Add submodules here.
; +<*>
; [env:ENV_NAME]
; build_src_filter = +<MAIN.c> +<FILE2.c> ...
[env:Lab10]
build_src_filter = +<Lab10_main.c> +<Agent.c> +<Buttons.c> +<Field.c> +<FieldOled.c> +<Message.c> +<Negotiation.c>

[env:AgentTest]
build_src_filter = +<AgentTest.c> +<Agent.c> +<Field.c> +<FieldOled.c> +<Negotiation.c>

[env:FieldTest]
build_src_filter = +<FieldTest.c> +<Field.c>

[env:MessageTest]
build_src_filter = +<MessageTest.c> +<Message.c>

[env:NegotiationTest]
build_src_filter = +<NegotiationTest.c> +<Negotiation.c>

; Below, we include fully-functional BattleBoats submodules. Each uses "weakly-bound" function definitions, which allows a developer
; to write their code incrementally. This means the following:
;   1. You can build a functioning BattleBoats project using PlatformIO without including any of your own function definitions.
;   2. Each function that you write will be favored by the compiler over the precompiled version.
;       For example, if you write your own `MessageEncode()` function in your code, it will be used when you compile and
;       upload your project to your Nucleo board.
;   3. Each function that you have not explicitly written will be automatically included from the working *.o file.
;       For example, if you have not yet created a `MessageDecode()` function in your code, you can still use the precompiled `MessageDecode()`
;       function provided in the `Message_correct.o` file.
;   4. Before you submit your finished BattleBoats project, you will need to test it using the ABOVE project environments (i.e. not just the 
;       "Lab10_solution" environment defined below).
[env:Lab10_solution]
build_src_filter = +<Lab10_main.c> +<Agent.c> +<Buttons.c> +<Field.c> +<FieldOled.c> +<Message.c> +<Negotiation.c>
build_flags = 
    -Wl,-u,_printf_float,-u,_scanf_float
    -DSTM32F4
    -L./objs
    -l:Field_correct.o
    -l:HumanAgent.o
    -l:Message_correct.o
    -l:Negotiation_correct.o
    -DHSE_VALUE=8000000U
lib_deps =
    ./objs
    ./../Common
